<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.5.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.otoko</groupId>
	<artifactId>test-git-ignore</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>test-git-ignore</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<skipTests>true</skipTests>
		<!--<maven.build.version>${version}-${maven.build.timestamp}</maven.build.version>-->
		<!--<maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>-->
		<docker.image.prefix>registry.cn-hangzhou.aliyuncs.com/oooojbk</docker.image.prefix>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<!--<finalName>${project.artifactId}.${maven.build.timestamp}</finalName>-->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>install</phase>
						<configuration>
							<tasks>
								<copy todir="./docker"> <!--  文件将要输出目录 在parent pom中统一配置，此处引用即可-->
									<fileset dir="${project.build.directory}"> <!-- 待拷贝文件的目录，默认目录在项目的target下-->
										<include name="*.jar" /> <!-- 待拷贝文件，可以使用下面的通配符，还可以是其他目录的文件。此处需要与project.bulid.finalName对应，否则可能找不到文件 -->
									</fileset>
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.14</version>
				<configuration>

					<!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 -->
					<!--<imageName>${docker.image.prefix}/${name}</imageName>-->
					<imageTags>
						<imageTag>${maven.build.version}</imageTag>
					</imageTags>

					<!-- 指定Dockerfile所在的路径 -->
					<dockerDirectory>${project.basedir}</dockerDirectory>

					<!--<resources>-->
						<!--<resource>-->
							<!--<targetPath>/</targetPath>-->
							<!--<directory>${project.build.directory}</directory>-->
							<!--<include>${project.artifactId}.${maven.build.timestamp}.jar</include>-->
						<!--</resource>-->
					<!--</resources>-->

					<!-- 与maven配置文件settings.xml一致 -->
					<serverId>test-git-ignore</serverId>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
